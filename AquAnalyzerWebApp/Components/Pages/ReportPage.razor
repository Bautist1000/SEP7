@page "/report/{Id:int}"
@page "/report/new/{Id:int}"
@page "/report/edit/{Id:int}"
@using AquAnalyzerAPI.Models
@inject IReportPageService ReportPageService
@inject IVisualisationPageService VisualisationPageService
@inject NavigationManager NavigationManager

<div class="container">
    <h3>@(IsNewReport ? "Create Report" : "Edit Report")</h3>

    <div class="form-group mb-3">
        <label>Title</label>
        <input class="form-control" @bind="report.Title" />
    </div>

    <div class="form-group mb-3">
        <label>Description</label>
        <textarea class="form-control" @bind="report.Description"></textarea>
    </div>

    <h4>Visualizations</h4>
    <div class="mb-3">
        <select class="form-control" @bind="selectedVisualizationType">
            <option value="">Select type...</option>
            <option value="barchart">Bar Chart</option>
            <option value="linechart">Line Chart</option>
            <option value="metricsbar">Metrics Bar</option>
        </select>
        <button class="btn btn-secondary mt-2" @onclick="AddVisualization">Add Visualization</button>
    </div>

    @if (report.Visualisations?.Any() == true)
    {
        foreach (var vis in report.Visualisations)
        {
            <Visualisation VisualisationData="@vis" />
        }
    }

    <div class="mt-3">
        <button class="btn btn-primary" @onclick="SaveReport">Save</button>
        <button class="btn btn-secondary" @onclick="BackToList">Cancel</button>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Report report = new();
    private string selectedVisualizationType;
    private bool isNewReportFlag;

    private bool IsNewReport => NavigationManager.Uri.Contains("/new/");

    protected override async Task OnInitializedAsync()
    {
        isNewReportFlag = IsNewReport;

        if (!IsNewReport)
        {
            try
            {
                report = await ReportPageService.GetReportById(Id);
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Error fetching report with ID {Id}: {ex.Message}");
                NavigationManager.NavigateTo("/reports");
            }
        }
        else
        {
            report.Id = Id;
            report.GeneratedDate = DateTime.Now;
        }
    }

    private async Task SaveReport()
    {
        try
        {
            if (IsNewReport)
            {
                report = await ReportPageService.AddReport(report);
                Console.WriteLine("Created new report {Id}", report.Id);
                isNewReportFlag = false; // Update the flag to indicate the report is no longer new
            }
            else
            {
                await ReportPageService.UpdateReport(report);
                Console.WriteLine("Updated report {Id}:", report.Id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error saving report {Id}:", report.Id);
        }
    }

    private async Task AddVisualization()
    {
        if (string.IsNullOrEmpty(selectedVisualizationType)) return;

        if (IsNewReport)
        {
            // Save the report first if it is new
            await SaveReport();
        }

        var vis = new VisualisationData
            {
                Type = selectedVisualizationType,
                ReportId = report.Id
            };

        report.Visualisations.Add(vis);
        await VisualisationPageService.AddVisualisation(vis);
    }

    private void BackToList()
    {
        NavigationManager.NavigateTo("/reports");
    }
}