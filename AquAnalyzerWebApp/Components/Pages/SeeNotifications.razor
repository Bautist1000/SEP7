@page "/notifications"
@using Microsoft.AspNetCore.Components.Authorization
@using AquAnalyzerAPI.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject INotificationsService NotificationsService

<h3>Notifications
    @if (unreadCount > 0)
    {
        <span class="unread-badge">@unreadCount</span>
    }
</h3>

<div class="notifications-container">
    @if (notifications == null)
    {
        <p>Loading...</p>
    }
    else if (!notifications.Any())
    {
        <p>No notifications found.</p>
    }
    else
    {
        @foreach (var notification in notifications)
        {
            <div class="notification-card @(notification.ReadAt.HasValue ? "read" : "unread")">
                <div class="notification-header">
                    <span class="notification-type @notification.Type.ToLower()">@notification.Type</span>
                    <small class="notification-date">@notification.CreatedAt.ToString("g")</small>
                </div>
                <div class="notification-body">
                    <p>@notification.Message</p>
                    @if (notification.Abnormality != null)
                    {
                        <div class="abnormality-details">
                            <p><strong>Abnormality:</strong> @notification.Abnormality.Type</p>
                            <p>@notification.Abnormality.Description</p>
                        </div>
                    }
                </div>
                <div class="notification-actions">
                    @if (!notification.ReadAt.HasValue)
                    {
                        <button class="btn btn-primary" @onclick="() => MarkAsRead(notification.Id)">
                            Mark as Read
                        </button>
                    }
                    <button class="btn btn-danger" @onclick="() => DeleteNotification(notification.Id)">
                        Delete
                    </button>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<Notification> notifications;
    private int unreadCount = 0;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            notifications = (await NotificationsService.GetAllNotifications()).ToList();
            unreadCount = notifications?.Count(n => !n.ReadAt.HasValue) ?? 0;

        }
    }

    private async Task MarkAsRead(int id)
    {
        await NotificationsService.MarkNotificationAsRead(id, DateTime.UtcNow);
        notifications = (await NotificationsService.GetAllNotifications()).ToList();
    }

    private async Task DeleteNotification(int id)
    {
        await NotificationsService.DeleteNotification(id);
        notifications = notifications.Where(n => n.Id != id).ToList();
    }
}

<style>
    .notifications-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 1rem;
    }

    .notification-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
        padding: 1rem;
        transition: transform 0.2s;
    }

    .notification-card:hover {
        transform: translateY(-2px);
    }

    .notification-card.read {
        opacity: 0.7;
    }

    .notification-card.unread {
        border-left: 4px solid #007bff;
    }

    .notification-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .notification-type {
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.875rem;
    }

    .notification-type.error {
        background: #dc3545;
        color: white;
    }

    .notification-type.warning {
        background: #ffc107;
        color: black;
    }

    .notification-type.info {
        background: #17a2b8;
        color: white;
    }

    .notification-date {
        color: #6c757d;
    }

    .notification-body {
        margin: 1rem 0;
    }

    .abnormality-details {
        background: #f8f9fa;
        padding: 0.75rem;
        border-radius: 4px;
        margin-top: 0.5rem;
    }

    .notification-actions {
        display: flex;
        gap: 0.5rem;
        justify-content: flex-end;
    }

    .unread-badge {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.25rem;
        color: #fff;
        background-color: #dc3545;
        margin-left: 0.5rem;
    }

    .btn {
        padding: 0.375rem 0.75rem;
        border-radius: 4px;
        border: none;
        cursor: pointer;
    }

    .btn-primary {
        background: #007bff;
        color: white;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
    }
</style>