@page "/reports"
@using AquAnalyzerAPI.Models
@inject IReportPageService ReportPageService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="header">
        <h2>Reports</h2>
        <button class="btn btn-primary" @onclick="CreateNewReport">Create New Report</button>
    </div>

    @if (reports == null)
    {
        <p>Loading...</p>
    }
    else if (!reports.Any())
    {
        <div class="empty-state">
            <p>No reports to show</p>
        </div>
    }
    else
    {
        <div class="reports-list">
            @foreach (var report in reports)
            {
                <div class="report-item">
                    <div class="report-info">
                        <h4>@report.Title</h4>
                        <p>@report.Description</p>
                        <small>Created: @report.GeneratedDate.ToShortDateString()</small>
                    </div>
                    <div class="report-actions">
                        <button class="btn btn-primary" @onclick="() => ViewReport(report.Id)">View</button>
                        <button class="btn btn-secondary" @onclick="() => UpdateReport(report.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteReport(report.Id)">Delete</button>
                    </div>
                </div>
            }
        </div>
    }

</div>

@code {
    private List<Report> reports = new();
    private bool showDeleteConfirm;
    private int reportToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadReports();
    }

    private async Task LoadReports()
    {
        try
        {
            reports = (await ReportPageService.GetAllReports()).ToList();
            Console.WriteLine("Loaded {Count} reports", reports.Count);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading reports", ex.Message);
        }
    }

    private void CreateNewReport()
    {
        int newId = reports?.Any() == true ? reports.Max(r => r.Id) + 1 : 1;
        NavigationManager.NavigateTo($"/report/new/{newId}");
    }

    private void ViewReport(int id)
    {
        NavigationManager.NavigateTo($"/report/{id}");
    }

    private void UpdateReport(int id)
    {
        NavigationManager.NavigateTo($"/report/edit/{id}");
    }


    private async Task DeleteReport(int id)
    {
        await ReportPageService.DeleteReport(id);
        await LoadReports();
    }
}