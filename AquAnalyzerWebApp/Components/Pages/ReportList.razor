@page "/reports"
@using AquAnalyzerAPI.Models
@inject IReportPageService ReportPageService
@inject NavigationManager NavigationManager

<div class="container">
    <h3>Reports</h3>
    <button class="btn btn-primary mb-3" @onclick="CreateNewReport">Create New Report</button>

    @if (reports == null)
    {
        <p>Loading...</p>
    }
    else if (!reports.Any())
    {
        <p>No reports available.</p>
    }
    else
    {
        @foreach (var report in reports)
        {
            <div class="report-container">
                <div class="report-header">
                    <div class="report-title">@report.Title</div>
                    <div class="report-actions">
                        <button class="btn btn-sm btn-primary" @onclick="() => ViewReport(report.Id)">View</button>
                        <button class="btn btn-sm btn-secondary" @onclick="() => EditReport(report.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteReportPrompt(report.Id)">Delete</button>
                    </div>
                </div>
                <div class="report-description">@report.Description</div>
            </div>
        }
    }

    @if (showDeleteDialog)
    {
        <RadzenDialog>
            <div class="p-4">
                <h5>Confirm Delete</h5>
                <p>Are you sure you want to delete this report?</p>
                <div class="d-flex justify-content-end">
                    <button class="btn btn-danger me-2" @onclick="DeleteReport">Delete</button>
                    <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                </div>
            </div>
        </RadzenDialog>
    }
</div>

@code {
    private List<Report> reports;
    private int reportIdToDelete;
    private bool showDeleteDialog;

    protected override async Task OnInitializedAsync()
    {
        await LoadReports();
    }

    private async Task LoadReports()
    {
        reports = (await ReportPageService.GetAllReports()).ToList();
    }

    private void CreateNewReport()
    {
        int newId = reports?.Any() == true ? reports.Max(r => r.Id) + 1 : 1;
        NavigationManager.NavigateTo($"/report/new/{newId}");
    }

    private void ViewReport(int id)
    {
        NavigationManager.NavigateTo($"/report/view/{id}");
    }

    private void EditReport(int id)
    {
        NavigationManager.NavigateTo($"/report/edit/{id}");
    }

    private void DeleteReportPrompt(int id)
    {
        reportIdToDelete = id;
        showDeleteDialog = true;
    }

    private async Task DeleteReport()
    {
        await ReportPageService.DeleteReport(reportIdToDelete);
        showDeleteDialog = false;
        await LoadReports();
    }

    private void CancelDelete()
    {
        showDeleteDialog = false;
    }
}

<style>
    .report-container {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 16px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .report-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .report-title {
        font-size: 1.25rem;
        font-weight: bold;
    }

    .report-actions {
        display: flex;
        gap: 8px;
    }

    .report-description {
        font-size: 1rem;
        color: #555;
    }
</style>