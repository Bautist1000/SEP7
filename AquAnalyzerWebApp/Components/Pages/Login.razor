@page "/login"
@using System.Security.Claims
@using AquAnalyzerAPI.Services
@using AquAnalyzerAPI.Interfaces
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4 shadow-sm" style="max-width: 400px; width: 100%;">
        <h3 class="text-center mb-4">Login</h3>
        <EditForm EditContext="@editContext" OnValidSubmit="Authenticate">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="username" class="form-label">Username:</label>
                <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText id="password" @bind-Value="loginModel.Password" class="form-control" type="password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@ErrorMessage</span>
            </div>
            <div class="d-grid gap-2">
                <button class="btn btn-primary" type="submit">Login</button>
                <button class="btn btn-secondary" @onclick="NavigateToRegister">Register</button>
            </div>
        </EditForm>
        @if (IsLoading)
        {
            <div class="text-center mt-3">
                <span class="spinner-border text-primary" role="status" aria-hidden="true"></span>
                <span>Logging in...</span>
            </div>
        }
    </div>
</div>

@code {
    private EditContext editContext; // Tracks form state and validation
    private LoginModel loginModel = new(); // Encapsulate form data into a model
    private string? ErrorMessage;
    private bool IsLoading = false;

    protected override void OnInitialized()
    {
        // Initialize EditContext with the LoginModel for validation tracking
        editContext = new EditContext(loginModel);
    }

    private async Task Authenticate()
    {
        ErrorMessage = null;
        IsLoading = true;

        try
        {
            // Call IAuthService LoginAsync with loginModel data
            await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

            // Get ClaimsPrincipal to determine navigation
            var principal = await AuthService.GetAuthAsync();
            var role = principal.FindFirst(ClaimTypes.Role)?.Value;

            // Navigate based on role
            switch (role)
            {
                case "Analyst":
                    NavigationManager.NavigateTo("/manage-water-data");
                    break;
                case "VisualDesigner":
                    NavigationManager.NavigateTo("/water-data-dashboard");
                    break;
                default:
                    NavigationManager.NavigateTo("/");
                    break;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/register");
    }

    // LoginModel class to encapsulate form inputs
    public class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
