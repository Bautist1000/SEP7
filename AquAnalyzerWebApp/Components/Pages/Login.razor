@page "/login"
@using System.Security.Claims
@using AquAnalyzerAPI.Services
@using AquAnalyzerAPI.Interfaces
@using AquAnalyzerWebApp.Services
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager NavigationManager


<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4 shadow-sm" style="max-width: 400px; width: 100%;">
        <h3 class="text-center mb-4">Login</h3>

        <EditForm Model="@loginModel" OnValidSubmit="Authenticate">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="username" class="form-label">Username:</label>
                <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">@ErrorMessage</div>
            }

            <div class="d-grid gap-2">
                <button class="btn btn-primary" type="submit" disabled="@IsLoading">
                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Loading...</span>
                    }
                    else
                    {
                        <span>Login</span>
                    }
                </button>
                <button type="button" class="btn btn-secondary" @onclick="NavigateToRegister">Register</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? ErrorMessage;
    private bool IsLoading;

    protected override void OnInitialized()
    {
        // Initialize loginModel
        loginModel = new LoginModel();
    }

    private async Task Authenticate()
    {
        if (string.IsNullOrEmpty(loginModel.Username) || string.IsNullOrEmpty(loginModel.Password))
        {
            ErrorMessage = "Username and password are required.";
            return;
        }

        IsLoading = true;
        try
        {
            bool success = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);
            if (success)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Invalid username or password";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }
    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/register");
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}
