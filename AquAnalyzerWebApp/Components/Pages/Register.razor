@page "/register"
@using AquAnalyzerAPI.Models
@using AquAnalyzerWebApp.Services
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@rendermode InteractiveServer

<h1>Register</h1>
<h5>Select your role and fill in the details:</h5>

<div class="mb-4">
    <label for="roleSelection" class="form-label">Role:</label>
    <select id="roleSelection" class="form-control" @bind="selectedRole" @bind:event="onchange">
        <option value="Analyst">Analyst</option>
        <option value="VisualDesigner">Visual Designer</option>
    </select>
</div>

<EditForm Model="@currentUser" OnValidSubmit="@RegisterUser">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" @bind-Value="currentUser.Username" class="form-control" />
        <ValidationMessage For="@(() => currentUser.Username)" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="currentUser.Email" class="form-control" />
        <ValidationMessage For="@(() => currentUser.Email)" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="currentUser.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => currentUser.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@if (showModal)
{
    <div class="modal-backdrop" @onclick="GoToLogin">
        <div class="modal-dialog" @onclick:stopPropagation>
            <h4>Registration Successful!</h4>
            <p>Your account has been created successfully. Please log in to continue.</p>
            <button class="btn btn-primary" @onclick="GoToLogin">Go to Login</button>
        </div>
    </div>
}

@code {
    private User currentUser = new Analyst { Role = "Analyst" };
    private string selectedRole = "Analyst";
    private string? errorMessage;
    private bool showModal = false;

    protected override void OnInitialized()
    {
        SetUserModel(); // Initialize user model
    }

    private void OnRoleChanged()
    {
        SetUserModel();
        StateHasChanged();
    }

    private void SetUserModel()
    {
        try
        {
            Console.WriteLine($"Setting user model for role: {selectedRole}");
            currentUser = selectedRole switch
            {
                "Analyst" => new Analyst
                    {
                        Role = "Analyst",
                        Username = currentUser?.Username ?? "",
                        Password = currentUser?.Password ?? "",
                        Email = currentUser?.Email ?? ""
                    },
                "VisualDesigner" => new VisualDesigner
                    {
                        Role = "VisualDesigner",
                        Username = currentUser?.Username ?? "",
                        Password = currentUser?.Password ?? "",
                        Email = currentUser?.Email ?? ""
                    },
                _ => throw new ArgumentException($"Invalid role: {selectedRole}")
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SetUserModel: {ex.Message}");
            errorMessage = $"Error setting user model: {ex.Message}";
        }
    }

    private async Task RegisterUser()
    {
        try
        {
            Console.WriteLine($"Attempting to register user with role: {selectedRole}");
            Console.WriteLine($"User data: Username={currentUser.Username}, Email={currentUser.Email}, Role={currentUser.Role}");

            if (selectedRole == "Analyst")
            {
                var analyst = new Analyst
                    {
                        Username = currentUser.Username,
                        Password = currentUser.Password,
                        Email = currentUser.Email,
                        Role = "Analyst"
                    };
                await AuthService.RegisterAnalystAsync(analyst);
            }
            else if (selectedRole == "VisualDesigner")
            {
                var designer = new VisualDesigner
                    {
                        Username = currentUser.Username,
                        Password = currentUser.Password,
                        Email = currentUser.Email,
                        Role = "VisualDesigner"
                    };
                await AuthService.RegisterVisualDesignerAsync(designer);
            }

            showModal = true;
            errorMessage = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Registration error: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            errorMessage = $"Registration failed: {ex.Message}";
        }
    }
    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
}


<style>
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1050;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-dialog {
        background: white;
        padding: 2rem;
        border-radius: 10px;
        max-width: 400px;
        text-align: center;
        z-index: 1051;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .modal-dialog h4 {
        margin-bottom: 1rem;
        color: #333;
    }

    .modal-dialog p {
        margin-bottom: 1.5rem;
        color: #666;
    }

    .modal-dialog .btn {
        min-width: 120px;
    }
</style>
