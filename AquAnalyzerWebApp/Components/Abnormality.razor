@using AquAnalyzerAPI.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWaterMetricsService WaterMetricsService
@inject IWaterDataService WaterDataService

@if (isAnalyst && hasAbnormalities)
{
        <div class="abnormality-icon" @onclick="ShowDetails">
            <i class="fas fa-exclamation-circle"></i>
        @if (showDetails)
        {
                    <div class="abnormality-details">
                        <h4>Detected Abnormalities:</h4>
                        <ul>
                    @foreach (var abnormality in abnormalities)
                    {
                                    <li>
                                        <span class="type">@abnormality.Type</span>
                                        <p class="description">@abnormality.Description</p>
                                        <small class="timestamp">@abnormality.Timestamp.ToString("g")</small>
                                    </li>
                    }
                        </ul>
                    </div>
        }
        </div>
}

@code {
    private bool isAnalyst = false;
    private bool hasAbnormalities = false;
    private bool showDetails = false;
    private List<Abnormality> abnormalities = new();

    [Parameter]
    public int WaterMetricsId { get; set; }

    [Parameter]
    public int WaterDataId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Check if user is an analyst
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAnalyst = user.IsInRole("Analyst");

        if (isAnalyst)
        {
            await CheckForAbnormalities();
        }
    }

    private async Task CheckForAbnormalities()
    {
        var metrics = new List<Abnormality>();

        // Check WaterMetrics abnormalities
        if (WaterMetricsId != 0)
        {
            metrics.AddRange(await CheckWaterMetricsAbnormalities(WaterMetricsId));
        }

        // Check WaterData abnormalities
        if (WaterDataId != 0)
        {
            metrics.AddRange(await CheckWaterDataAbnormalities(WaterDataId));
        }

        abnormalities = metrics;
        hasAbnormalities = abnormalities.Any();
    }

    private async Task<List<Abnormality>> CheckWaterMetricsAbnormalities(int metricsId)
    {
        var abnormalityList = new List<Abnormality>();
        var metrics = await WaterMetricsService.GetWaterMetricsById(metricsId);

        if (metrics != null)
        {
            // Check for unusual water efficiency ratio
            if (metrics.WaterEfficiencyRatio < 0.5)
            {
                abnormalityList.Add(new Abnormality
                    {
                        Type = "Low Water Efficiency",
                        Description = $"Water efficiency ratio is critically low: {metrics.WaterEfficiencyRatio:F2}",
                        Timestamp = DateTime.Now
                    });
            }

            // Check for high leakage rate
            if (metrics.LeakageRate > 10)
            {
                abnormalityList.Add(new Abnormality
                    {
                        Type = "High Leakage Rate",
                        Description = $"Leakage rate is above threshold: {metrics.LeakageRate:F2}%",
                        Timestamp = DateTime.Now
                    });
            }
        }

        return abnormalityList;
    }

    private async Task<List<Abnormality>> CheckWaterDataAbnormalities(int dataId)
    {
        var abnormalityList = new List<Abnormality>();
        var waterData = await WaterDataService.GetWaterDataByIdAsync(dataId);

        if (waterData != null)
        {
            // Check for unusual flow rate
            if (waterData.FlowRate > 100)
            {
                abnormalityList.Add(new Abnormality
                    {
                        Type = "High Flow Rate",
                        Description = $"Flow rate is unusually high: {waterData.FlowRate:F2}",
                        Timestamp = DateTime.Now
                    });
            }

            // Check for high electricity consumption
            if (waterData.ElectricityConsumption > 1000)
            {
                abnormalityList.Add(new Abnormality
                    {
                        Type = "High Energy Usage",
                        Description = $"Electricity consumption is above normal: {waterData.ElectricityConsumption:F2}",
                        Timestamp = DateTime.Now
                    });
            }

            // Check for detected leaks
            if (waterData.LeakDetected == true)
            {
                abnormalityList.Add(new Abnormality
                    {
                        Type = "Leak Detected",
                        Description = $"Leak detected at location: {waterData.Location}",
                        Timestamp = DateTime.Now
                    });
            }
        }

        return abnormalityList;
    }

    private void ShowDetails()
    {
        showDetails = !showDetails;
    }
}

<style>
    .abnormality-icon {
        position: relative;
        cursor: pointer;
    }

    .abnormality-icon i {
        color: #dc3545;
        font-size: 1.5rem;
        animation: pulse 2s infinite;
    }

    .abnormality-details {
        position: absolute;
        top: 100%;
        right: 0;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        padding: 1rem;
        min-width: 300px;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        z-index: 1000;
    }

    .abnormality-details ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .abnormality-details li {
        padding: 0.5rem 0;
        border-bottom: 1px solid #dee2e6;
    }

    .abnormality-details li:last-child {
        border-bottom: none;
    }

    .type {
        font-weight: bold;
        color: #dc3545;
    }

    .description {
        margin: 0.25rem 0;
        color: #495057;
    }

    .timestamp {
        color: #6c757d;
    }

    @keyframes pulse {
        0% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.1);
        }
        100% {
            transform: scale(1);
        }
    }
</style>