@using AquAnalyzerAPI.Models
@using Radzen.Blazor

<div class="visualization-container">
    @if (VisualisationData == null)
    {
        <p>Loading visualization...</p>
    }
    else
    {
        <div class="chart-controls mb-3">
            <h4>@VisualisationData.ChartConfig.Title</h4>
            <div class="btn-group">
                <button class="btn btn-sm btn-outline-secondary" @onclick="RefreshData">
                    <i class="fas fa-sync"></i> Refresh
                </button>
                <button class="btn btn-sm btn-outline-danger" @onclick="DeleteVisualization">
                    <i class="fas fa-trash"></i> Remove
                </button>
            </div>
        </div>

        <div class="chart-container">
            @switch (VisualisationData.Type.ToLower())
            {
                case "barchart":
                    <RadzenChart>
                        <RadzenBarSeries Data="@VisualisationData.RawDataUsed" CategoryProperty="Timestamp"
                            ValueProperty="UsageVolume" Title="Water Usage">
                        </RadzenBarSeries>
                        <RadzenValueAxis>
                            <RadzenGridLines Visible="@VisualisationData.ChartConfig.ShowGrid" />
                            <RadzenAxisTitle Text="@VisualisationData.ChartConfig.YAxisLabel" />
                        </RadzenValueAxis>
                        <RadzenCategoryAxis>
                            <RadzenGridLines Visible="@VisualisationData.ChartConfig.ShowGrid" />
                            <RadzenAxisTitle Text="@VisualisationData.ChartConfig.XAxisLabel" />
                        </RadzenCategoryAxis>
                        <RadzenLegend Visible="@VisualisationData.ChartConfig.ShowLegend" />
                    </RadzenChart>
                    break;

                case "linechart":
                    <RadzenChart>
                        <RadzenLineSeries Data="@VisualisationData.RawDataUsed" CategoryProperty="Timestamp"
                            ValueProperty="UsageVolume" Title="Water Usage Trend">
                        </RadzenLineSeries>
                        <RadzenValueAxis>
                            <RadzenGridLines Visible="@VisualisationData.ChartConfig.ShowGrid" />
                            <RadzenAxisTitle Text="@VisualisationData.ChartConfig.YAxisLabel" />
                        </RadzenValueAxis>
                        <RadzenCategoryAxis>
                            <RadzenGridLines Visible="@VisualisationData.ChartConfig.ShowGrid" />
                            <RadzenAxisTitle Text="@VisualisationData.ChartConfig.XAxisLabel" />
                        </RadzenCategoryAxis>
                        <RadzenLegend Visible="@VisualisationData.ChartConfig.ShowLegend" />
                    </RadzenChart>
                    break;

                case "metricsbar":
                    <RadzenChart>
                        <RadzenColumnSeries Data="@VisualisationData.MetricsUsed" CategoryProperty="MetricName"
                            ValueProperty="Value" Title="Water Metrics">
                        </RadzenColumnSeries>
                        <RadzenValueAxis>
                            <RadzenGridLines Visible="@VisualisationData.ChartConfig.ShowGrid" />
                            <RadzenAxisTitle Text="Value" />
                        </RadzenValueAxis>
                        <RadzenCategoryAxis>
                            <RadzenGridLines Visible="@VisualisationData.ChartConfig.ShowGrid" />
                            <RadzenAxisTitle Text="Metric" />
                        </RadzenCategoryAxis>
                        <RadzenLegend Visible="@VisualisationData.ChartConfig.ShowLegend" />
                    </RadzenChart>
                    break;

                default:
                    <p>Unsupported chart type: @VisualisationData.Type</p>
                    break;
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public VisualisationData VisualisationData { get; set; }

    [Inject]
    public IVisualisationPageService VisualisationService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (VisualisationData != null)
        {
            await RefreshData();
        }
    }

    private async Task RefreshData()
    {
        try
        {
            VisualisationData.RawDataUsed = (await VisualisationService.GetWaterDataForChart(
            VisualisationData.Id,
            DateTime.Now.AddDays(-30),
            DateTime.Now
            )).ToList();

            VisualisationData.MetricsUsed = (await VisualisationService.GetMetricsForChart(
            VisualisationData.Id,
            DateTime.Now.AddDays(-30),
            DateTime.Now
            )).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing visualization data: {ex.Message}");
        }
    }

    private async Task DeleteVisualization()
    {
        await VisualisationService.DeleteVisualisation(VisualisationData.Id);
    }
}

<style>
    .visualization-container {
        padding: 20px;
    }

    .visualization {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        padding: 20px;
    }

    .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
        margin-top: 1rem;
    }

    .metric-card {
        padding: 1rem;
    }

    .metric-value {
        display: flex;
        justify-content: space-between;
        margin: 5px 0;
    }
</style>